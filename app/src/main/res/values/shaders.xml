<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="basic_vertex_glsl">
        #version 300 es\n
        layout(location = 0) in vec3 pos;
        layout(location = 1) in vec2 texCoords;
        layout(location = 2) in vec3 normal;
        uniform mat4 viewProj;
        uniform mat4 model;
        uniform mat4 normalMatrix;
        uniform mat4 lightSpaceMatrix;
        out vec2 tCoords;
        out vec3 norm;
        out vec3 fragPos;
        out vec4 fragPosLightSpace;
        void main(){
            gl_Position = viewProj * model * vec4(pos, 1.0);
            fragPos = vec3(model * vec4(pos, 1.0));
            tCoords = texCoords;
            norm = mat3(normalMatrix) * normal;
            fragPosLightSpace = lightSpaceMatrix * model * vec4(pos, 1.0);
        }
    </string>
    <string name="basic_frag_glsl">
        #version 300 es\n
        precision mediump float;
        in vec2 tCoords;
        in vec3 norm;
        in vec3 fragPos;
        in vec4 fragPosLightSpace;
        out vec4 glFragColor;
        struct dirLight{
            vec3 position;
            vec3 color;
            float ambientFac, specFac, diffFac;
        };
        uniform sampler2D tex;
        uniform sampler2D shadowMap;
        uniform vec4 color;
        uniform bool useColor;
        uniform dirLight sun;
        uniform vec3 eyePos;
        float calcShadow(vec3 normal, vec3 lightDir){
            vec3 lightSpaceProj = fragPosLightSpace.xyz / fragPosLightSpace.w;
            lightSpaceProj = lightSpaceProj * 0.5 + 0.5;
            float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.05);
            float currentDepth = lightSpaceProj.z;
            if(currentDepth > 1.0) return 0.0;
            float closestDepth = texture(shadowMap, lightSpaceProj.xy).r;
            return currentDepth - bias > closestDepth ? 1.0 : 0.0;
        }
        void main(){
            vec4 diffuseColor;
            if(useColor) diffuseColor = color;
            else diffuseColor = texture(tex, tCoords);
            vec3 ambientLighting = sun.color * sun.ambientFac;
            vec3 lightDir = normalize(sun.position - fragPos);
            vec3 normal = normalize(norm);
            float diffFactor = max(dot(normal, lightDir), 0.1);
            vec3 diffuseLighting = diffFactor * sun.color * sun.diffFac;
            if(diffuseColor.rgb == vec3(1, 0, 0)) diffuseLighting += diffuseColor.rgb;

            vec3 reflectDirection = normalize(lightDir + normalize(eyePos - fragPos));
            float spec = pow(max(dot(normal, reflectDirection), 0.0), 32.0);
            vec3 specularLighting = spec * sun.specFac * sun.color;
            glFragColor = vec4((ambientLighting + (1.0 - calcShadow(normal, lightDir))) * diffuseLighting * diffuseColor.rgb, diffuseColor.a);
        }
    </string>
    <string name="skybox_vert_glsl">
        #version 300 es\n
        layout(location = 0) in vec3 pos;
        out vec3 texCoord;
        uniform mat4 view;
        uniform mat4 proj;
        uniform mat4 model;
        void main(){
            texCoord = pos;
            gl_Position = proj * mat4(mat3(view)) * model * vec4(pos, 1.0);
        }
    </string>
    <string name="skybox_frag_glsl">
        #version 300 es\n
        precision mediump float;
        in vec3 texCoord;
        uniform samplerCube skyboxTexture;
        out vec4 glFragColor;
        void main(){
            glFragColor = texture(skyboxTexture, texCoord);
        }
    </string>
    <string name="debug_vert_glsl">
        #version 300 es\n
        layout(location = 0) in vec3 pos;
        uniform mat4 viewProj;
        uniform mat4 model;
        void main(){
            gl_Position = viewProj * model * vec4(pos, 1.0);
        }
    </string>
    <string name="debug_frag_glsl">
        #version 300 es\n
        precision mediump float;
        out vec4 fragColor;
        uniform vec4 color;
        void main(){
            fragColor = color;
        }
    </string>
    <string name="depth_frag_glsl">
        #version 300 es\n
        precision mediump float;
        void main(){
        }
    </string>
    <integer name="basic_shader_id">0</integer>
    <integer name="sky_shader_id">1</integer>
    <integer name="debug_shader_id">2</integer>
    <integer name="depth_shader_id">3</integer>
</resources>